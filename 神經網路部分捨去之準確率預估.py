# -*- coding: utf-8 -*-
"""神經網路部分捨去之準確率預估.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14qf2IiTZrMLIj0q4hPbPT0SdqC2bLEoh
"""

import numpy as np
import matplotlib.pyplot as plt

number_of_neurons = 1000

real_part = 10 * np.random.random(number_of_neurons)
exponent_part = np.random.randint(-10, 11, number_of_neurons)
A = real_part * np.power(10.0, exponent_part.astype(np.float64))
B = 2 * np.random.random(number_of_neurons) - 1

C = A * B
C = np.abs(C)
C_sorted_desc = np.sort(C)[::-1]

answer = np.sum(C)

Accuracy = np.cumsum(C_sorted_desc) / answer

plt.plot(Accuracy)
plt.xlabel('Number of operations')
plt.ylabel('Accuracy')
plt.title('Accuracy Plot')
plt.show()
thresholds = [0.6, 0.7, 0.8, 0.9]
thresholds_index = {threshold: np.argmax(Accuracy >= threshold) + 1 for threshold in thresholds}
for a, b in thresholds_index.items():
  print(f"運算量{b}時準確率達到{a*100}%")

import numpy as np
import matplotlib.pyplot as plt

number_of_neurons = 1000

real_part = 10 * np.random.random(number_of_neurons)
exponent_part = np.random.randint(-5, 6, number_of_neurons) #冪次範圍更改
A = real_part * np.power(10.0, exponent_part.astype(np.float64))
B = 2 * np.random.random(number_of_neurons) - 1

C = A * B
C = np.abs(C)
C_sorted_desc = np.sort(C)[::-1]

answer = np.sum(C)

Accuracy = np.cumsum(C_sorted_desc) / answer

plt.plot(Accuracy)
plt.xlabel('Number of operations')
plt.ylabel('Accuracy')
plt.title('Accuracy Plot')
plt.show()
thresholds = [0.6, 0.7, 0.8, 0.9]
thresholds_index = {threshold: np.argmax(Accuracy >= threshold) + 1 for threshold in thresholds}
for a, b in thresholds_index.items():
  print(f"運算量{b}時準確率達到{a*100}%")

import numpy as np
import matplotlib.pyplot as plt

number_of_neurons = 1000

real_part = 10 * np.random.random(number_of_neurons)
exponent_part = np.random.randint(-15, 16, number_of_neurons) #冪次範圍更改(發現冪次範圍越大達到相同準確度的運算需求數量就越少)
A = real_part * np.power(10.0, exponent_part.astype(np.float64))
B = 2 * np.random.random(number_of_neurons) - 1

C = A * B
C = np.abs(C)
C_sorted_desc = np.sort(C)[::-1]

answer = np.sum(C)

Accuracy = np.cumsum(C_sorted_desc) / answer

plt.plot(Accuracy)
plt.xlabel('Number of operations')
plt.ylabel('Accuracy')
plt.title('Accuracy Plot')
plt.show()
thresholds = [0.6, 0.7, 0.8, 0.9]
thresholds_index = {threshold: np.argmax(Accuracy >= threshold) + 1 for threshold in thresholds}
for a, b in thresholds_index.items():
  print(f"運算量{b}時準確率達到{a*100}%")

